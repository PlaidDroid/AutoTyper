# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  job1:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 14
      uses: actions/setup-java@v2
      with:
        java-version: '14'
        distribution: 'adopt'
    - name: set env
      run: |
        echo "PROJECT=AutoTyper" >> $GITHUB_ENV
        echo "MAIN_CLASS=com.sidetrackd.autotyper.App" >> $GITHUB_ENV 
        echo "RELEASE_VERSION=`${GITHUB_REF#refs/*/}`"  >> $GITHUB_ENV
    - name: cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: build with maven
      run: mvn package
    - run: mkdir release
    - name: build executable for linux
      if: ${{ runner.os == 'Linux' }}
      run: |
        jpackage --input target/ --name "${{ env.PROJECT }}" --main-jar "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}"-shaded.jar --main-class "${{ env.MAIN_CLASS }} --type app-image
        jpackage --name "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}" --app-image "${{ env.PROJECT }}"
        tar -czvf "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}".tar.gz "${{ env.PROJECT }}"
        mv "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}".* release
    - name: build executable for others
      if: ${{ runner.os != 'Linux' }}
      run: |
        jpackage --input target/ --name "${{ env.PROJECT }}" --main-jar "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}"-shaded.jar --main-class "${{ env.MAIN_CLASS }}
        mv "${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}".* release
    - run: mv target/"${{ env.PROJECT }}"-"${{ env.RELEASE_VERSION }}"-shaded.jar release
    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: release
        path: release/
      
  job2:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: get release artifacts
      uses: actions/download-artifact@v2
      with:
        name: release
    - name: unzip contents
      run: unzip release.zip
    - name: create release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: false
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
